# This is an autogenerated file for dynamic methods in Copy
# Please rerun bundle exec rake rails_rbi:models[Copy] to regenerate.

# typed: strong
module Copy::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Copy::GeneratedAttributeMethods
  sig { returns(T.nilable(Integer)) }
  def book_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def book_id=(value); end

  sig { returns(T::Boolean) }
  def book_id?; end

  sig { returns(Integer) }
  def book_reference; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def book_reference=(value); end

  sig { returns(T::Boolean) }
  def book_reference?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def created_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(T::Boolean)) }
  def missing; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def missing=(value); end

  sig { returns(T::Boolean) }
  def missing?; end

  sig { returns(T::Boolean) }
  def on_loan; end

  sig { params(value: T::Boolean).void }
  def on_loan=(value); end

  sig { returns(T::Boolean) }
  def on_loan?; end

  sig { returns(T.nilable(Integer)) }
  def shelf_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def shelf_id=(value); end

  sig { returns(T::Boolean) }
  def shelf_id?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def updated_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module Copy::GeneratedAssociationMethods
  sig { returns(T.nilable(::Book)) }
  def book; end

  sig { params(value: T.nilable(::Book)).void }
  def book=(value); end

  sig { returns(::Loan::ActiveRecord_Associations_CollectionProxy) }
  def loans; end

  sig { returns(T::Array[Integer]) }
  def loan_ids; end

  sig { params(value: T::Enumerable[::Loan]).void }
  def loans=(value); end

  sig { returns(T.nilable(::Shelf)) }
  def shelf; end

  sig { params(value: T.nilable(::Shelf)).void }
  def shelf=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def users; end

  sig { returns(T::Array[Integer]) }
  def user_ids; end

  sig { params(value: T::Enumerable[::User]).void }
  def users=(value); end
end

module Copy::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Copy]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Copy]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Copy]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Copy)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Copy) }
  def find_by_id!(id); end
end

class Copy < ApplicationRecord
  include Copy::GeneratedAttributeMethods
  include Copy::GeneratedAssociationMethods
  extend Copy::CustomFinderMethods
  extend Copy::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Copy::ActiveRecord_Relation, Copy::ActiveRecord_Associations_CollectionProxy, Copy::ActiveRecord_AssociationRelation) }
end

module Copy::QueryMethodsReturningRelation
  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def available(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def missing(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def on_loan(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def ordered_by_availability(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def recently_added(*args); end

  sig { returns(Copy::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Copy::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Copy::ActiveRecord_Relation) }
  def extending(*args, &block); end
end

module Copy::QueryMethodsReturningAssociationRelation
  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def available(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def missing(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def on_loan(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def ordered_by_availability(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def recently_added(*args); end

  sig { returns(Copy::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Copy::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Copy::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Copy::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end
end

class Copy::ActiveRecord_Relation < ActiveRecord::Relation
  include Copy::ActiveRelation_WhereNot
  include Copy::CustomFinderMethods
  include Copy::QueryMethodsReturningRelation
  Elem = type_member(fixed: Copy)
end

class Copy::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Copy::ActiveRelation_WhereNot
  include Copy::CustomFinderMethods
  include Copy::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Copy)
end

class Copy::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Copy::CustomFinderMethods
  include Copy::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Copy)

  sig { params(records: T.any(Copy, T::Array[Copy])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Copy, T::Array[Copy])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Copy, T::Array[Copy])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Copy, T::Array[Copy])).returns(T.self_type) }
  def concat(*records); end
end
